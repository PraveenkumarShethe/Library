buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
		jacksonDatabindVersion = '2.6.1'
		springSecurityWebVersion = '4.1.1.RELEASE'
		springxWebVersion = '4.1.1.RELEASE'
		flywayCoreVersion = '4.0.3'
		flywaySpringTestVersion = '4.0.1'

	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE'
		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'docker'
apply plugin: 'maven'

jar {
	baseName = 'Library'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
task copyYamlFiles(type: Copy) {
	fileTree('build/libs')
	from 'src/main/resources/application.yml'
	into 'build/libs/'
}
jar.dependsOn copyYamlFiles

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile("org.springframework.boot:spring-boot-starter-undertow")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-logging")
	compile("org.springframework.boot:spring-boot-starter-log4j2")
	compile("commons-validator:commons-validator:1.4.0")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.security:spring-security-web:${springSecurityWebVersion}")
	compile("org.springframework.security:spring-security-acl:${springSecurityWebVersion}")
	compile("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}")
	compile("com.fasterxml.jackson.core:jackson-core:2.7.5")
	compile("com.fasterxml.jackson.core:jackson-annotations:2.7.5")
	compile("org.hsqldb:hsqldb")
	compile("org.postgresql:postgresql:9.4-1204-jdbc42")
	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}
// Integration Testing
sourceSets {
	integrationTest {
		java.srcDir file('src/integrationtest/java')
		resources.srcDir file('src/integrationtest/resources')
		compileClasspath = sourceSets.main.output + configurations.testRuntime
		runtimeClasspath = output + compileClasspath
	}
}

task integrationTest(type: Test) {
	description = 'Runs all integration tests'
	group = 'verification'
//	testClassesDir = sourceSets.integrationtest.output.classesDir
//	classpath = sourceSets.integrationtest.runtimeClasspath
//	reports.junitXml.destination = file("$testResultsDir/integrationtest")

	testLogging {
		events 'started', 'passed', 'skipped', 'failed'
	}
}